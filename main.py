import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from google.oauth2 import service_account
from googleapiclient.discovery import build
from datetime import datetime
from bot_key import bot_key,sheet_id

# Th√™m logging ·ªü ƒë·∫ßu file, sau ph·∫ßn import
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# C√°c tr·∫°ng th√°i cho conversation handler
INPUT_NAME, CHOOSE_DATE, CONFIRM_DAYOFF, INPUT_SUBSTITUTE = range(4)

# Thi·∫øt l·∫≠p Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'credentials.json'
SPREADSHEET_ID = sheet_id
RANGE_NAME = "'Trang t√≠nh1'!A2:H"

credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)
service = build('sheets', 'v4', credentials=credentials)
sheet = service.spreadsheets()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("Xem l·ªãch d·∫°y", callback_data='check_calen'),
            InlineKeyboardButton("B√°o ngh·ªâ", callback_data='request_day_off')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã Xin ch√†o! T√¥i l√† bot qu·∫£n l√Ω l·ªãch d·∫°y.\n"
        "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
        "‚úÖ Xem l·ªãch d·∫°y c·ªßa gi√°o vi√™n\n"
        "‚úÖ B√°o ngh·ªâ v√† s·∫Øp x·∫øp gi√°o vi√™n d·∫°y thay\n\n"
        "Vui l√≤ng ch·ªçn ch·ª©c nƒÉng b√™n d∆∞·ªõi:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('session_'):
        row_index = int(query.data.split('_')[1])
        context.user_data['row_index'] = row_index
        
        # L·∫•y th√¥ng tin ca d·∫°y t·ª´ sheet
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'Trang t√≠nh1'!A{row_index}:D{row_index}"
        ).execute()
        row = result.get('values', [])[0]
        
        await query.message.reply_text(
            f"X√°c nh·∫≠n ngh·ªâ ng√†y {context.user_data['selected_date']}?\n"
            f"Ca: {row[1]}\n"
            f"M√¥n: {row[2]}\n"
            f"L·ªõp: {row[3]}\n"
            "G√µ 'ok' ƒë·ªÉ x√°c nh·∫≠n ho·∫∑c b·∫•t k·ª≥ ƒë·ªÉ h·ªßy"
        )
        return CONFIRM_DAYOFF
    elif query.data == 'check_calen':
        await query.message.reply_text("Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n ƒë·ªÉ xem l·ªãch d·∫°y:")
        context.user_data['action'] = 'check_calendar'
        return INPUT_NAME
    elif query.data == 'request_day_off':
        if 'teacher_name' not in context.user_data:
            await query.message.reply_text("Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n tr∆∞·ªõc:")
            context.user_data['action'] = 'request_dayoff'
            return INPUT_NAME
        else:
            await query.message.reply_text(
                f"Xin ch√†o {context.user_data['teacher_name']}, "
                "vui l√≤ng nh·∫≠p ng√†y mu·ªën ngh·ªâ (ƒë·ªãnh d·∫°ng DD/MM/YYYY):"
            )
            return CHOOSE_DATE
    elif query.data == 'want_dayoff':
        if 'teacher_name' not in context.user_data:
            await query.message.reply_text("Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n tr∆∞·ªõc:")
            context.user_data['action'] = 'request_dayoff'
            return INPUT_NAME
        else:
            await query.message.reply_text(
                f"Xin ch√†o {context.user_data['teacher_name']}, "
                "vui l√≤ng nh·∫≠p ng√†y mu·ªën ngh·ªâ (ƒë·ªãnh d·∫°ng DD/MM/YYYY):"
            )
            return CHOOSE_DATE
    elif query.data == 'no_dayoff':
        await query.message.reply_text("C·∫£m ∆°n b·∫°n ƒë√£ xem l·ªãch d·∫°y!")
        return ConversationHandler.END

async def input_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    teacher_name = update.message.text
    context.user_data['teacher_name'] = teacher_name
    
    if context.user_data.get('action') == 'check_calendar':
        await check_calen(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            f"Xin ch√†o {teacher_name}, "
            "vui l√≤ng nh·∫≠p ng√†y mu·ªën ngh·ªâ (ƒë·ªãnh d·∫°ng DD/MM/YYYY):"
        )
        return CHOOSE_DATE

async def check_calen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    teacher_name = context.user_data.get('teacher_name')
    try:
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()
        values = result.get('values', [])
        
        if not values:
            await update.message.reply_text('Kh√¥ng c√≥ d·ªØ li·ªáu')
            return ConversationHandler.END

        response = f"üìÖ L·ªãch d·∫°y c·ªßa gi√°o vi√™n {teacher_name}:\n\n"
        found = False
        for row in values:
            if row[5] == teacher_name:
                found = True
                response += f"üìå Ng√†y: {row[0]}\n"
                response += f"‚è∞ Ca: {row[1]}\n"
                response += f"üìö M√¥n: {row[2]}\n"
                response += f"üë• L·ªõp: {row[3]}\n"
                response += f"üè´ Ph√≤ng: {row[4]}\n"
                response += f"üìù Tr·∫°ng th√°i: {row[6]}\n"
                if len(row) > 7 and row[7]:
                    response += f"GV thay: {row[7]}\n"
                response += "---------------\n"
        
        if not found:
            await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y l·ªãch d·∫°y c·ªßa gi√°o vi√™n {teacher_name}")
            return ConversationHandler.END

        await update.message.reply_text(response)
        
        # Th√™m c√¢u h·ªèi v·ªÅ vi·ªác b√°o ngh·ªâ
        keyboard = [
            [
                InlineKeyboardButton("C√≥", callback_data='want_dayoff'),
                InlineKeyboardButton("Kh√¥ng", callback_data='no_dayoff')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "B·∫°n c√≥ mu·ªën b√°o ngh·ªâ kh√¥ng?",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
        
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {str(e)}")
        return ConversationHandler.END

async def process_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_date = update.message.text
    teacher_name = context.user_data.get('teacher_name')
    
    # T√¨m d√≤ng t∆∞∆°ng ·ª©ng trong sheet
    result = sheet.values().get(
        spreadsheetId=SPREADSHEET_ID,
        range=RANGE_NAME
    ).execute()
    values = result.get('values', [])
    
    # T√¨m t·∫•t c·∫£ c√°c ca d·∫°y trong ng√†y ƒë∆∞·ª£c ch·ªçn
    teaching_sessions = []
    for i, row in enumerate(values):
        if row[0] == selected_date and row[5] == teacher_name:
            teaching_sessions.append({
                'index': i + 2,  # +2 v√¨ d√≤ng ƒë·∫ßu l√† header
                'ca': row[1],
                'mon': row[2],
                'lop': row[3]
            })
    
    if not teaching_sessions:
        await update.message.reply_text(
            f"Kh√¥ng t√¨m th·∫•y l·ªãch d·∫°y c·ªßa b·∫°n v√†o ng√†y {selected_date}!"
        )
        return ConversationHandler.END
    
    if len(teaching_sessions) == 1:
        # N·∫øu ch·ªâ c√≥ 1 ca d·∫°y
        session = teaching_sessions[0]
        context.user_data['row_index'] = session['index']
        await update.message.reply_text(
            f"X√°c nh·∫≠n ngh·ªâ ng√†y {selected_date}?\n"
            f"Ca: {session['ca']}\n"
            f"M√¥n: {session['mon']}\n"
            f"L·ªõp: {session['lop']}\n"
            "G√µ 'ok' ƒë·ªÉ x√°c nh·∫≠n ho·∫∑c b·∫•t k·ª≥ ƒë·ªÉ h·ªßy"
        )
        return CONFIRM_DAYOFF
    else:
        # N·∫øu c√≥ nhi·ªÅu ca d·∫°y
        keyboard = []
        for session in teaching_sessions:
            button_text = f"Ca {session['ca']} - {session['mon']} - {session['lop']}"
            keyboard.append([InlineKeyboardButton(
                button_text, 
                callback_data=f"session_{session['index']}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.user_data['selected_date'] = selected_date
        
        await update.message.reply_text(
            "B·∫°n c√≥ nhi·ªÅu ca d·∫°y trong ng√†y n√†y.\n"
            "Vui l√≤ng ch·ªçn ca mu·ªën b√°o ngh·ªâ:",
            reply_markup=reply_markup
        )
        return CONFIRM_DAYOFF

async def confirm_dayoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.lower()
    if response == 'ok':
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        sheet.values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'Trang t√≠nh1'!G{context.user_data['row_index']}",
            valueInputOption='RAW',
            body={'values': [['B√°o ngh·ªâ']]}
        ).execute()
        
        await update.message.reply_text("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√°o ngh·ªâ th√†nh c√¥ng!")
        await update.message.reply_text("Vui l√≤ng nh·∫≠p t√™n gi√°o vi√™n d·∫°y thay:")
        return INPUT_SUBSTITUTE
    else:
        await update.message.reply_text("ƒê√£ h·ªßy y√™u c·∫ßu ngh·ªâ.")
        # Hi·ªÉn th·ªã menu ch√≠nh
        keyboard = [
            [
                InlineKeyboardButton("Xem l·ªãch d·∫°y", callback_data='check_calen'),
                InlineKeyboardButton("B√°o ngh·ªâ", callback_data='request_day_off')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

async def input_substitute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    substitute_name = update.message.text
    
    # C·∫≠p nh·∫≠t t√™n gi√°o vi√™n d·∫°y thay
    sheet.values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=f"'Trang t√≠nh1'!H{context.user_data['row_index']}",
        valueInputOption='RAW',
        body={'values': [[substitute_name]]}
    ).execute()
    
    await update.message.reply_text(f"ƒê√£ c·∫≠p nh·∫≠t gi√°o vi√™n d·∫°y thay: {substitute_name}")
    
    # Hi·ªÉn th·ªã menu ch√≠nh
    keyboard = [
        [
            InlineKeyboardButton("Xem l·ªãch d·∫°y", callback_data='check_calen'),
            InlineKeyboardButton("B√°o ngh·ªâ", callback_data='request_day_off')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

def main():
    logger.info("Bot ƒëang kh·ªüi ƒë·ªông...")
    application = ApplicationBuilder().token(bot_key).build()
    
    # Th√™m handlers
    application.add_handler(CommandHandler("start", start))
    
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(button_handler),
            CommandHandler('check_calen', lambda u, c: input_name(u, c)),
            CommandHandler('request_day_off', lambda u, c: input_name(u, c))
        ],
        states={
            INPUT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_name)],
            CHOOSE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_date)],
            CONFIRM_DAYOFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_dayoff)],
            INPUT_SUBSTITUTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_substitute)]
        },
        fallbacks=[CallbackQueryHandler(button_handler)]
    )
    application.add_handler(conv_handler)
    
    logger.info("Bot ƒë√£ s·∫µn s√†ng!")
    application.run_polling()

if __name__ == '__main__':
    main()
